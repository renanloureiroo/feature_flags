package com.renanloureiro.feature_flags.application.usecases;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ContextConfiguration;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.renanloureiro.feature_flags.application.dtos.CreateFeatureFlagDTO;
import com.renanloureiro.feature_flags.application.repositories.FeatureFlagRepository;
import com.renanloureiro.feature_flags.application.validation.JsonSchemaValidationService;
import com.renanloureiro.feature_flags.domain.FeatureFlag;
import com.renanloureiro.feature_flags.domain.FeatureFlagType;
import com.renanloureiro.feature_flags.infrastructure.TestConfigUnit;

@ExtendWith(MockitoExtension.class)
@ContextConfiguration(classes = TestConfigUnit.class)
class CreateFeatureFlagUseCaseTest {

  @Mock
  private FeatureFlagRepository featureFlagRepository;

  @Mock
  private JsonSchemaValidationService schemaValidationService;

  private CreateFeatureFlagUseCase useCase;

  private ObjectMapper objectMapper;

  @BeforeEach
  void setUp() {
    objectMapper = new ObjectMapper();
    useCase = new CreateFeatureFlagUseCase();
    // Usando reflection para injetar as dependências
    try {
      java.lang.reflect.Field repoField = CreateFeatureFlagUseCase.class.getDeclaredField("featureFlagRepository");
      repoField.setAccessible(true);
      repoField.set(useCase, featureFlagRepository);

      java.lang.reflect.Field validationField = CreateFeatureFlagUseCase.class
          .getDeclaredField("schemaValidationService");
      validationField.setAccessible(true);
      validationField.set(useCase, schemaValidationService);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Test
  @DisplayName("Deve criar feature flag com sucesso")
  void shouldCreateFeatureFlag() throws Exception {
    // Arrange
    String name = "Test Feature Flag";
    String description = "Test flag description";
    FeatureFlagType type = FeatureFlagType.BOOLEAN;
    JsonNode schema = objectMapper.readTree("{\"type\": \"boolean\"}");

    CreateFeatureFlagDTO dto = CreateFeatureFlagDTO.builder()
        .name(name)
        .description(description)
        .type(type)
        .schema(schema)
        .build();

    FeatureFlag expectedFeatureFlag = FeatureFlag.builder()
        .name(name)
        .slug("test-feature-flag")
        .description(description)
        .type(type)
        .schema(schema)
        .build();

    // Mock dos métodos void
    org.mockito.Mockito.doNothing().when(schemaValidationService).validateSchema(schema);
    org.mockito.Mockito.doNothing().when(schemaValidationService).validateSchemaForType(schema, type.name());
    when(featureFlagRepository.existsBySlug("test-feature-flag")).thenReturn(false);
    when(featureFlagRepository.save(expectedFeatureFlag)).thenReturn(expectedFeatureFlag);

    // Act
    FeatureFlag result = useCase.execute(dto);

    // Assert
    assertNotNull(result);
    assertEquals(name, result.getName());
    assertEquals(description, result.getDescription());
    assertEquals(type, result.getType());
    assertEquals(schema, result.getSchema());
  }

  @Test
  @DisplayName("Deve criar feature flag com slug gerado automaticamente")
  void shouldCreateFeatureFlagWithAutoGeneratedSlug() throws Exception {
    // Arrange
    String name = "Another Test Flag";
    String description = "Another test description";
    FeatureFlagType type = FeatureFlagType.STRING;
    JsonNode schema = objectMapper.readTree("{\"type\": \"string\", \"maxLength\": 100}");

    CreateFeatureFlagDTO dto = CreateFeatureFlagDTO.builder()
        .name(name)
        .description(description)
        .type(type)
        .schema(schema)
        .build();

    FeatureFlag expectedFeatureFlag = FeatureFlag.builder()
        .name(name)
        .slug("another-test-flag")
        .description(description)
        .type(type)
        .schema(schema)
        .build();

    // Mock dos métodos void
    org.mockito.Mockito.doNothing().when(schemaValidationService).validateSchema(schema);
    org.mockito.Mockito.doNothing().when(schemaValidationService).validateSchemaForType(schema, type.name());
    when(featureFlagRepository.existsBySlug("another-test-flag")).thenReturn(false);
    when(featureFlagRepository.save(expectedFeatureFlag)).thenReturn(expectedFeatureFlag);

    // Act
    FeatureFlag result = useCase.execute(dto);

    // Assert
    assertNotNull(result);
    assertEquals(name, result.getName());
    assertEquals("another-test-flag", result.getSlug());
    assertEquals(description, result.getDescription());
    assertEquals(type, result.getType());
    assertEquals(schema, result.getSchema());
  }
}