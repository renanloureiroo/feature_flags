spring:
  application:
    name: feature-flags-api

  datasource:
    url: jdbc:postgresql://localhost:5432/feature_flags
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 600000 # 10 min
      connection-timeout: 30000 # 30 s

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
    open-in-view: false
    show-sql: false

  flyway:
    enabled: false
    locations: classpath:db/migration
    baseline-on-migrate: true

  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 min em ms (ajuste se quiser)
      key-prefix: "ff::"
      use-key-prefix: true

  data:
    redis:
      host: localhost
      port: 6379
      # password: ${REDIS_PASSWORD:}  # caso tenha senha

# OpenTelemetry Configuration
otel:
  traces:
    exporter: otlp
    endpoint: http://localhost:14250
    sampler_arg: 1.0
  metrics:
    exporter: prometheus
  logs:
    exporter: otlp
    endpoint: http://localhost:14250

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    io.opentelemetry: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true

server:
  port: 8080
  servlet:
    context-path: /api/v1
  compression:
    enabled: true

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: alpha
    tagsSorter: alpha
